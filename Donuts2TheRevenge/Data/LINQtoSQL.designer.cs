#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="donut")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertcustomer(customer instance);
    partial void Updatecustomer(customer instance);
    partial void Deletecustomer(customer instance);
    partial void Insertdonut(donut instance);
    partial void Updatedonut(donut instance);
    partial void Deletedonut(donut instance);
    partial void Insertevent(@event instance);
    partial void Updateevent(@event instance);
    partial void Deleteevent(@event instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Data.Properties.Settings.Default.donutConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<customer> customer
		{
			get
			{
				return this.GetTable<customer>();
			}
		}
		
		public System.Data.Linq.Table<donut> donut
		{
			get
			{
				return this.GetTable<donut>();
			}
		}
		
		public System.Data.Linq.Table<@event> @event
		{
			get
			{
				return this.GetTable<@event>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.customer")]
	public partial class customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _customer_id;
		
		private string _customer_f_name;
		
		private string _customer_l_name;
		
		private EntitySet<@event> _event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Oncustomer_idChanging(int value);
    partial void Oncustomer_idChanged();
    partial void Oncustomer_f_nameChanging(string value);
    partial void Oncustomer_f_nameChanged();
    partial void Oncustomer_l_nameChanging(string value);
    partial void Oncustomer_l_nameChanged();
    #endregion
		
		public customer()
		{
			this._event = new EntitySet<@event>(new Action<@event>(this.attach_event), new Action<@event>(this.detach_event));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int customer_id
		{
			get
			{
				return this._customer_id;
			}
			set
			{
				if ((this._customer_id != value))
				{
					this.Oncustomer_idChanging(value);
					this.SendPropertyChanging();
					this._customer_id = value;
					this.SendPropertyChanged("customer_id");
					this.Oncustomer_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_f_name", DbType="VarChar(50)")]
		public string customer_f_name
		{
			get
			{
				return this._customer_f_name;
			}
			set
			{
				if ((this._customer_f_name != value))
				{
					this.Oncustomer_f_nameChanging(value);
					this.SendPropertyChanging();
					this._customer_f_name = value;
					this.SendPropertyChanged("customer_f_name");
					this.Oncustomer_f_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer_l_name", DbType="VarChar(50)")]
		public string customer_l_name
		{
			get
			{
				return this._customer_l_name;
			}
			set
			{
				if ((this._customer_l_name != value))
				{
					this.Oncustomer_l_nameChanging(value);
					this.SendPropertyChanging();
					this._customer_l_name = value;
					this.SendPropertyChanged("customer_l_name");
					this.Oncustomer_l_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_event", Storage="_event", ThisKey="customer_id", OtherKey="customer")]
		public EntitySet<@event> @event
		{
			get
			{
				return this._event;
			}
			set
			{
				this._event.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_event(@event entity)
		{
			this.SendPropertyChanging();
			entity.customer1 = this;
		}
		
		private void detach_event(@event entity)
		{
			this.SendPropertyChanging();
			entity.customer1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.donut")]
	public partial class donut : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _donut_id;
		
		private string _donut_name;
		
		private string _filling;
		
		private System.Nullable<int> _price;
		
		private System.Nullable<int> _quantity;
		
		private EntitySet<@event> _event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Ondonut_idChanging(int value);
    partial void Ondonut_idChanged();
    partial void Ondonut_nameChanging(string value);
    partial void Ondonut_nameChanged();
    partial void OnfillingChanging(string value);
    partial void OnfillingChanged();
    partial void OnpriceChanging(System.Nullable<int> value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    #endregion
		
		public donut()
		{
			this._event = new EntitySet<@event>(new Action<@event>(this.attach_event), new Action<@event>(this.detach_event));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donut_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int donut_id
		{
			get
			{
				return this._donut_id;
			}
			set
			{
				if ((this._donut_id != value))
				{
					this.Ondonut_idChanging(value);
					this.SendPropertyChanging();
					this._donut_id = value;
					this.SendPropertyChanged("donut_id");
					this.Ondonut_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donut_name", DbType="VarChar(50)")]
		public string donut_name
		{
			get
			{
				return this._donut_name;
			}
			set
			{
				if ((this._donut_name != value))
				{
					this.Ondonut_nameChanging(value);
					this.SendPropertyChanging();
					this._donut_name = value;
					this.SendPropertyChanged("donut_name");
					this.Ondonut_nameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_filling", DbType="VarChar(50)")]
		public string filling
		{
			get
			{
				return this._filling;
			}
			set
			{
				if ((this._filling != value))
				{
					this.OnfillingChanging(value);
					this.SendPropertyChanging();
					this._filling = value;
					this.SendPropertyChanged("filling");
					this.OnfillingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Int")]
		public System.Nullable<int> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="donut_event", Storage="_event", ThisKey="donut_id", OtherKey="donut")]
		public EntitySet<@event> @event
		{
			get
			{
				return this._event;
			}
			set
			{
				this._event.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_event(@event entity)
		{
			this.SendPropertyChanging();
			entity.donut1 = this;
		}
		
		private void detach_event(@event entity)
		{
			this.SendPropertyChanging();
			entity.donut1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.event")]
	public partial class @event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _event_id;
		
		private System.DateTime _event_time;
		
		private bool _is_stocking_event;
		
		private int _amount;
		
		private int _donut;
		
		private int _customer;
		
		private EntityRef<donut> _donut1;
		
		private EntityRef<customer> _customer1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onevent_idChanging(int value);
    partial void Onevent_idChanged();
    partial void Onevent_timeChanging(System.DateTime value);
    partial void Onevent_timeChanged();
    partial void Onis_stocking_eventChanging(bool value);
    partial void Onis_stocking_eventChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OndonutChanging(int value);
    partial void OndonutChanged();
    partial void OncustomerChanging(int value);
    partial void OncustomerChanged();
    #endregion
		
		public @event()
		{
			this._donut1 = default(EntityRef<donut>);
			this._customer1 = default(EntityRef<customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int event_id
		{
			get
			{
				return this._event_id;
			}
			set
			{
				if ((this._event_id != value))
				{
					this.Onevent_idChanging(value);
					this.SendPropertyChanging();
					this._event_id = value;
					this.SendPropertyChanged("event_id");
					this.Onevent_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_event_time", DbType="Date NOT NULL")]
		public System.DateTime event_time
		{
			get
			{
				return this._event_time;
			}
			set
			{
				if ((this._event_time != value))
				{
					this.Onevent_timeChanging(value);
					this.SendPropertyChanging();
					this._event_time = value;
					this.SendPropertyChanged("event_time");
					this.Onevent_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_is_stocking_event", DbType="Bit NOT NULL")]
		public bool is_stocking_event
		{
			get
			{
				return this._is_stocking_event;
			}
			set
			{
				if ((this._is_stocking_event != value))
				{
					this.Onis_stocking_eventChanging(value);
					this.SendPropertyChanging();
					this._is_stocking_event = value;
					this.SendPropertyChanged("is_stocking_event");
					this.Onis_stocking_eventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_donut", DbType="Int NOT NULL")]
		public int donut
		{
			get
			{
				return this._donut;
			}
			set
			{
				if ((this._donut != value))
				{
					if (this._donut1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OndonutChanging(value);
					this.SendPropertyChanging();
					this._donut = value;
					this.SendPropertyChanged("donut");
					this.OndonutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_customer", DbType="Int NOT NULL")]
		public int customer
		{
			get
			{
				return this._customer;
			}
			set
			{
				if ((this._customer != value))
				{
					if (this._customer1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncustomerChanging(value);
					this.SendPropertyChanging();
					this._customer = value;
					this.SendPropertyChanged("customer");
					this.OncustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="donut_event", Storage="_donut1", ThisKey="donut", OtherKey="donut_id", IsForeignKey=true)]
		public donut donut1
		{
			get
			{
				return this._donut1.Entity;
			}
			set
			{
				donut previousValue = this._donut1.Entity;
				if (((previousValue != value) 
							|| (this._donut1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._donut1.Entity = null;
						previousValue.@event.Remove(this);
					}
					this._donut1.Entity = value;
					if ((value != null))
					{
						value.@event.Add(this);
						this._donut = value.donut_id;
					}
					else
					{
						this._donut = default(int);
					}
					this.SendPropertyChanged("donut1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="customer_event", Storage="_customer1", ThisKey="customer", OtherKey="customer_id", IsForeignKey=true)]
		public customer customer1
		{
			get
			{
				return this._customer1.Entity;
			}
			set
			{
				customer previousValue = this._customer1.Entity;
				if (((previousValue != value) 
							|| (this._customer1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._customer1.Entity = null;
						previousValue.@event.Remove(this);
					}
					this._customer1.Entity = value;
					if ((value != null))
					{
						value.@event.Add(this);
						this._customer = value.customer_id;
					}
					else
					{
						this._customer = default(int);
					}
					this.SendPropertyChanged("customer1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
